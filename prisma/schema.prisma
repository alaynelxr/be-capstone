// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

// datasource db {
//   provider = "postgresql"
//   url      = env("DATABASE_URL")
// }

generator client {
  provider = "prisma-client-js"
}
 
datasource db {
  provider = "postgresql"
  url = env("POSTGRES_PRISMA_URL") // uses connection pooling
  directUrl = env("POSTGRES_URL_NON_POOLING") // uses a direct connection
}

model User {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  uid        String   @unique
  email      String   @unique
  displayName String?
  lists      List[]
  proficiencies Proficiency[] // one user can have many proficiencies in moves
  moves         Move[] 
}

model Category {
  id        String    @id @default(cuid())
  createdAt DateTime  @default(now())
  title     String
  slug      String    @unique
  moves     Move[]    // M:N relationship with Move
}

model Alias {
  id       String   @id @default(cuid())
  createdAt DateTime @default(now())
  name     String
 moves Move[]
}

model Move {
  id         String   @id @default(cuid())
  createdAt  DateTime @default(now())
  title      String
  desc       String?
  img        String?
  difficulty Difficulty @relation(fields:[difficultyId], references: [id])
  difficultyId String
  isFeatured Boolean  @default(false)
  categories Category[]   // M:N relationship with Category
  lists      List[]       // M:N relationship with List
  alias Alias[]
  proficiencies Proficiency[]
  creator     User?  @relation(fields: [creatorId], references: [id])
  creatorId      String?  
}

model Proficiency {
  id       String       @id @default(cuid())
  level    String
  moveId   String?      // Define a foreign key for the move associated with this proficiency
  move     Move?     @relation(fields: [moveId], references: [id]) // Define the relation
  userUid   String?      // Define a foreign key for the user who owns this proficiency
  user     User?     @relation(fields: [userUid], references: [uid]) // Define the relation
    @@unique([moveId, userUid])
}

model List {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  moves     Move[]   // M:N relationship with Move
  user User @relation (fields:[userUid], references:[uid])
  userUid   String   // Field to store the user's Firebase UID
}

model Difficulty {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  title String
moves Move[] 

}


// model Category {
//   id        String    @id @default(cuid())
//   createdAt DateTime  @default(now())
//   title     String
//   slug      String    @unique
//   moves  Move[]
// }

// model Move {
//   id         String   @id @default(cuid())
//   createdAt  DateTime @default(now())
//   title      String
//   desc       String?
//   img        String?
//   difficulty String?
//   isFeatured Boolean  @default(false)
//   categories Category[]
//   lists      List[]
// }

// model List {
//   id        String   @id @default(cuid())
//   createdAt DateTime @default(now())
//   moves  Move[]
//   status    String
//   intent_id String?  @unique
//   // user   User @relation(fields: [userId], references: [id])
//   slug String @unique
// }
